cmake_minimum_required(VERSION 3.21)

# ~~~ файлы исходного кода ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >>>

# Получение всех файлов исходного кода
# Note: Многие считают GLOB плохой практикой, хотя я не вижу ничего плохого.
#   Если всё-таки будет необходимо, то можно переделать на указание вручную.
file(GLOB KLEVRET_COMMON_SOURCE_FILES
    "${KLEVRET_COMMON_PATH}/src/*.cpp"
    # Note: Так же видел, что в исходном конфиге заголовочные файлы не указывались.
    #   Честно говоря первый раз вижу подобное, но если нужно, то заголовочные файлы можно убрать.
    "${KLEVRET_COMMON_PATH}/src/*.hpp"
)

# ~~~ cli target ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >>>

# Переменная требуется для того, чтобы в случае изменения названия таргента,
#   не пришлось вручную менять во всех местах упоминания.
set(KLEVRET_COMMON_LIB "common")
#add_library(${KLEVRET_COMMON_LIB} OBJECT ${KLEVRET_COMMON_SOURCE_FILES})
target_compile_definitions(${KLEVRET_COMMON_LIB} PUBLIC COMMON)
set_target_properties(${KLEVRET_COMMON_LIB} PROPERTIES PUBLIC_HEADER "${KLEVRET_COMMON_PATH}/src/*.hpp")

# Опционально. Указание что в src так же нужно искать заголовочные файлы.
#   Используется в случаях с поддиректориями в файлах исходного кода, чтобы
#   указывать `#include <Subdir/File.hpp>`, а не `#include "../Subdir/File.hpp"`
target_include_directories(${KLEVRET_COMMON_LIB}
    PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/src/"
)

# Указание стандарта
target_compile_features(${KLEVRET_COMMON_LIB} PRIVATE cxx_std_23)

# Опции компиляции
target_compile_options(${KLEVRET_COMMON_LIB}
    PRIVATE ${KLEVRET_COMMON_COMPILE_OPTIONS}
)

# Остальные параметры
set_target_properties(${KLEVRET_COMMON_LIB} PROPERTIES
    CXX_EXTENSIONS OFF
    POSITION_INDEPENDENT_CODE ON
)

#target_link_libraries(${KLEVRET_COMMON_LIB}
#    PRIVATE
#        Boost::asio
#        Boost::algorithm
#        Boost::property_tree
#        Boost::json
#)

# ~~~ тесты ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >>>

if(KLEVRET_BUILD_TESTS)
    add_subdirectory(tests)
endif()

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ >>>
